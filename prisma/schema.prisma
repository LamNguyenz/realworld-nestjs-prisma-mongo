// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  username         String    @unique
  password         String
  bio              String?
  image            String?
  articles         Article[]
  followers        User[]    @relation("authorFollowers", fields: [followersIds], references: [id])
  followersIds     String[]  @db.ObjectId
  following        User[]    @relation("authorFollowers", fields: [followingIds], references: [id])
  followingIds     String[]  @db.ObjectId
  articlesLiked    Article[] @relation("likedArticles", fields: [articlesLikedIds], references: [id])
  articlesLikedIds String[]  @db.ObjectId
  comments         Comment[]
}

model Article {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  slug             String    @unique
  description      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  body             String
  tagList          String[]  @default([])
  author           User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         String    @db.ObjectId
  favoritedUsers   User[]    @relation("likedArticles", fields: [favoritedUserIds], references: [id])
  favoritedUserIds String[]  @db.ObjectId
  comments         Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String   @db.ObjectId
}
